ls()
x<-9
ls()
dir()
?list.files
args(list.files())
args(list.files
args(list.files)
old.dir <- getwd()
dir.create("testdir")
setwd(testdir)
setwd("testdir")
file.create("mytest.R")
ls
dir()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path('folder1', 'folder2')
?dir.create
dir.creat('testdir2')
dir.create('testdir2')
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
unlink("testdir2")
unlink("testdir2", recursive = TRUE)
setwd(old.dir)
unlink('testdir')
unlink('testdir', recursive = TRUE)
1:20
pi:10
15:1
?:
?':'
seq(1,20)
seq(0,10,by=.5)
seq(5,10, length = 30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect <- c(.5,55,-10,6)
num_vect <1
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My","name", "is")
my_char
paste(my_char, collapse = " ")
my_name <-c(my_char, "Kenneth")
my_name
paste(my_name, collapse = " ")
paste("Hello","world!", sep = " ")
paste(1:3, c("X", "Y", "Z"))
paste(1:3, c("X", "Y", "Z"), sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x*3
y
| <- rnorm(1000)
y<- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
is.na(my_data)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
library(ggplot2)
library("ggplot2")
install.packages("ggplot2")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
detach("package:ggplot2", unload=TRUE)
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library(swirl)
swirl()
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <-
| c(foo = 11, bar = 2, norf = NA)
vect <-c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, 4,5)
identical(my_matrix, my_matrix2)
patients <- c(Bill, Gina, Kelly, Sean)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(my_matrix)
cbind(patients, my_matrix)
my_data <-data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", \"rating", "test")
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data, cnames)
fjalsdfja
colnames(cnames)
colnames(my_data) <- cnames
my_Data
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 <7
10 <=10
5!=7
!(5=7)
!(5==7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <-sample(10)
ints
ints <5
ints >5
which(ints > 7)
any(ints < 0)
all( ints >0)
library(swirl)
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
submit()
submit()
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div= 2)
args(remainder)
submit()
submit()
evaluate(sd, c(1.4, 3.6, 7.9,8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x) x[1], c(8,4,0))
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[length(c)]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming", "is","fun!")
submit()
telegram("poop!")
submit()
mad_libs(place = "place", adjective = "adjective", noun = "noun")
submit()
"I" %p% "love" %p% "R!"
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lappy(flag_shapes, range)
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
length(unique_vals)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
?inv
x<- data.frame (1:26, letters)
View(x)
head(x)
rownames(x) <- (letters)
head(x)
y <- data.frame(26:(26+26), letters)
26+26
y <- data.frame(26:52, letters)
y <- data.frame(26:51, letters)
rbind(x,y)
z<- x+y
View(z)
View(y)
View(y)
View(z)
rownames(x) <- (1:26)
z<- rbind(x,y)
ls
rm(ls)
ls()
rm(ls())
rm(ls)
set.seed(1)
rpois(5,2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
plot(x,y)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
library(swirl)
swirl()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmasses, summary)
tapply(flags$population, flags$landmass, summary)
ls(plants)
ls
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plnats)
object.size(plants)
names(plant)
names(plants)
head(plants)
head(plants,10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4,replace=TRUE)
sample(1:6, 4,replace=TRUE)
sample(1:20,10)
letters
LETTERS
sample(LETTERS)
sample(c(0,1),100,replace=TRUE, prob= c(.3, .7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
?rpois
rpois(5)
rpois(5, 10)
replicate(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(di)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
month(t1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
source('~/.active-rstudio-document')
set
?currency
x <- 4
x<- $4
y<- c("$", x)
y
y<- c("$"+ x)
x <- 4
y <- paste("$", x)
y
library(swirl)
swirl()
swirl()
swirl()
?InstallCourses
install_from_swirl("Data Analysis")
swril()
swirl()
nxt()
nxt()
cars
l <- numeric()
class(l)
install.packages("XML")
library(XML)
fileurl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileurl, useInternet = TRUE)
doc <- xmlTreeParse(fileurl)
?par
windows()
jpeg()
colors()
yellow3
?par
quartz()
swirl()
library(swirl)
swirl()
dataset$variable
cars$mpgCity
myMPG <- cars$mpgCity
mean(myMPG)
median(myMPG)
table(myMPG)
19
pfchang <- rbinorm(1)
?binorm
pfchang <- binorm(1)
?rnorm
?binom
?rbinom
pf <- rbinom(1)
pf <- rbinom(0:1, 1, prob = .5)
pf <- rbinom(1, 1, prob = .5)
pf <- rbinom(1:2, 1, prob = .5)
pf <- rbinom(100, 1, prob = .5)
mean(pf)
sum(pf)
pf <- rbinom(100, 10, prob = .5)
pf <- rbinom(100, 1, prob = .5)
sum(pf)
pf <- rbinom(1, 1, prob = .5)
pf
pf <- rbinom(1, 1, prob = .5)
pf <- rbinom(1, 1, prob = .5)
pf <- rbinom(1, 1, prob = .5)
pf <- rbinom(1, 1, prob = .5)
pf <- rbinom(1, 1, prob = .5)
pf <- rbinom(1, 1, prob = .5)
pf <- rbinom(1, 1, prob = .5)
pf <- rbinom(1, 1, prob = .5)
pf <- rbinom(1, 1, prob = .5)
pf <- rbinom(1, 1, prob = .5)
pf <- rbinom(1, 1, prob = .5)
pf <- rbinom(1, 1, prob = .5)
pf <- rbinom(1, 1, prob = .5)
pf <- rbinom(1, 1, prob = .5)
pf <- rbinom(1, 1, prob = .5)
pf <- rbinom(10000, 1, prob = .5)
hist(pf)
sum(pf)
pf <- rbinom(100000, 1, prob = .5)
hist(pf)
sum(pf)
mean(pf)
pf <- rbinom(100000000, 1, prob = .5)
rm(pf)
install.packages("RMySQL")
library(swirl)
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
install.packages("httr")
install.packages("httr")
---
setwd("~/Documents/Coursera/RepData_PeerAssessment1")
data <- read.csv("activity.csv", header = TRUE)
clean<- na.omit(data)
steps <- clean$steps
date <- clean$date
interval <- clean$interval
steps_per_day<-tapply(steps, date, sum)
spddf <- data.frame(steps_per_day)
clean_spddf <- na.omit(spddf)
steps_per_interval <- tapply(steps, interval, mean)
z <- cbind(unique(interval), steps_per_interval)
steps2 <- c()
for (i in 1:17568){
if (is.na(data[i,1])){
x<- data[i,3]
y<- z[(z[,1] == x),2]
} else { y <- data[i,1]}
steps2 <- c(steps2,y)
}
data2 <- cbind(steps2, as.character(data[,2]),data[,3])
data2 <- data.frame(data2)
colnames(data2) <- c("steps", "date", "interval")
data2$steps <- as.numeric(as.character(data2$steps))
data2$interval <- as.integer(as.character(data2$interval))
data2$date<- as.Date(data2$date, format = "%Y-%m-%d")
date2 <- data2[,2]
steps_per_day2 <- tapply(steps2, date2, sum)
weekday <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
data2$day_of_week <-  factor((weekdays(date2) %in% weekday)+1L, levels=1:2, labels=c('weekend', 'weekday'))
weekdays <- data2[(data2$day_of_week == "weekday"),]
weekend <- data2[(data2$day_of_week == "weekend"),]
weekday_steps <- weekdays[,1]
weekday_interval <- weekdays[,3]
weekday_average <- tapply(weekday_steps, weekday_interval, mean)
weekday_list <- factor(rep("weekday", 288))
length(weekday_list)
head(weekday_list)
wd_average <- data.frame(weekday_average)
View(wd_average)
wd_average <- cbind(wd_average[,1], unique(interval), weekday_list)
View(wd_average)
class(wd_average)
rm(wd_average)
wd_average <- data.frame(weekday_average)
wd_average <- data.frame(cbind(wd_average[,1], unique(interval), weekday_list))
rm(wd_average)
wd_average <- data.frame(weekday_average)
wd_average <- data.frame(cbind(wd_average[,1], unique(interval), factor(weekday_list))
)
rm(wd_average)
wd_average <- data.frame(weekday_average)
new_df <- data.frame(cbind(wd_average[,1], unique(interval), factor(rep("weekday", 288))))
rm(new_df)
new_df <- data.frame(cbind(wd_average[,1], unique(interval), rep("weekend",288)))
View(new_df)
colnames(new_df) <- c("average_steps", "interval", "day_of_week")
View(new_df)
new_df$day_of_week <- as.factor(new_df$day_of_week)
View(new_df)
new_df$day_of_week <- as.factor(new_df$day_of_week)
new_df$interval <- as.integer(new_df$interval)
new_df$average_steps <- as.numeric(new_df$average_steps)
